# Copyright 2023 LiveKit, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Bump and publish crates

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}

jobs:
  # Wait for the builds workflow to complete
  wait-for-builds:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Wait for builds to complete
        run: |
          echo "Waiting for builds to complete..."
          # Using GitHub API to check if builds workflow was successful
          OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          REPO=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          COMMIT_SHA=$GITHUB_SHA
          
          # Wait for builds workflow to complete
          for i in {1..10}; do
            echo "Checking build status (attempt $i)..."
            STATUS=$(gh api repos/$OWNER/$REPO/commits/$COMMIT_SHA/check-runs --jq '.check_runs[] | select(.name | contains("Build (")) | .conclusion')
            
            # If we have success statuses for all builds, proceed
            if [[ $(echo "$STATUS" | grep -c "success") -gt 0 ]]; then
              echo "Builds completed successfully!"
              exit 0
            fi
            
            # If we have any failure statuses, fail
            if [[ $(echo "$STATUS" | grep -c "failure") -gt 0 ]]; then
              echo "Builds failed!"
              exit 1
            fi
            
            echo "Builds still running, waiting 30 seconds..."
            sleep 30
          done
          
          echo "Timed out waiting for builds to complete"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bump:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: wait-for-builds
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.NANPA_KEY }}
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Determine packages to bump
        id: determine_packages
        run: |
          # For workflow_dispatch, use the provided packages if any
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.packages }}" ]]; then
            PACKAGES="${{ github.event.inputs.packages }}"
            echo "Using manually specified packages: $PACKAGES"
          else
            # For push events, determine packages based on changed files
            echo "Determining packages to bump based on changed files..."
            
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || git diff --name-only $(git rev-list --max-parents=0 HEAD) HEAD)
            
            # Extract package directories from .nanparc
            if [ -f ".nanparc" ]; then
              PACKAGE_DIRS=$(grep -v '^#' .nanparc | grep "^packages" | cut -d ' ' -f 2-)
              
              # Initialize an empty array for packages to bump
              PACKAGES_TO_BUMP=()
              
              # For each package directory, check if any files have changed
              for PKG in $PACKAGE_DIRS; do
                if echo "curl $CHANGED_FILES" | grep -q "^$PKG/"; then
                  PACKAGES_TO_BUMP+=("$PKG")
                fi
              done
              
              # Join the packages with commas
              PACKAGES=$(IFS=,; echo "${PACKAGES_TO_BUMP[*]}")
              
              if [ -n "$PACKAGES" ]; then
                echo "Detected changes in packages: $PACKAGES"
              else
                echo "No changes detected in tracked packages."
                PACKAGES=""
              fi
            else
              echo "No .nanparc file found, unable to determine packages."
              PACKAGES=""
            fi
          fi
          
          # Save packages for later steps
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          
          # Create JSON array for ilo
          if [ -n "$PACKAGES" ]; then
            IFS=',' read -ra PKG_ARRAY <<< "$PACKAGES"
            JSON_ARRAY=$(printf '%s\n' "${PKG_ARRAY[@]}" | jq -R . | jq -s .)
          else
            JSON_ARRAY="[]"
          fi
          
          echo "Formatted packages JSON: $JSON_ARRAY"
          echo "$JSON_ARRAY" > packages.json

      - name: Debug packages.json content
        run: |
          echo "Raw file content:"
          cat packages.json
          echo "JSON validation check:"
          jq '.' packages.json || echo "Invalid JSON detected"
          
      - name: Use ilo to bump package versions
        if: steps.determine_packages.outputs.packages != ''
        uses: nbsp/ilo@v1
        with:
          packages: ${{ steps.determine_packages.outputs.packages }}

  publish:
    runs-on: ubuntu-latest
    needs: bump
    permissions:
      contents: write
    outputs:
      published_crates: ${{ steps.publish.outputs.published_crates }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          
      - name: Resync is needed after bump
        run: |
          git fetch --tags && git checkout origin/main
          
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Configure Cargo Registry
        run: |
          mkdir -p ~/.cargo
          # Create main config file
          cat > ~/.cargo/config.toml << EOF
          [registries.quantum-forge]
          index = "sparse+https://crate-registry.quantum-forge.io/api/v1/crates/"
          global-credential-providers = ["cargo:token"]

          [net]
          retry = 5
          git-fetch-with-cli = true

          [http]
          timeout = 120
          check-revoke = false
          multiplexing = false

          [term]
          verbose = true
          EOF
          
          # Show config for debugging
          cat ~/.cargo/config.toml
      - name: Check registry accessibility
        run: curl -I https://crate-registry.quantum-forge.io/ || exit 1

      - name: Debug Git Tags and Environment
        run: |
          echo "Current git tags at HEAD:"
          git tag --points-at HEAD || echo "No tags found"
          echo "CARGO_REGISTRY_TOKEN exists: ${{ env.CARGO_REGISTRY_TOKEN != '' }}"
          
      - name: Publish crates
        id: publish
        run: |
          # Set a default exit code
          EXIT_CODE=0
          
          # Process the tags
          CRATES_TO_PUBLISH=$(git tag --points-at HEAD | sed 's|^[^/]*@|@|' | sed 's|^[^/]*/||' | sed 's|@.*||')
          
          if [ -z "$CRATES_TO_PUBLISH" ]; then
            echo "No crates found to publish from tags"
            
            # Check if this is a push to main or a merged PR
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "This is a push to main branch - publishing livekit to registry"
              # For push events, we'll publish the livekit crate for testing
              cd livekit && cargo publish --no-verify --registry quantum-forge --allow-dirty --token "$CARGO_REGISTRY_TOKEN" || EXIT_CODE=$?
              
              # Record that we published livekit
              echo "published_crates=livekit" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
              echo "This is a merged PR to main branch - publishing livekit to registry"
              cd livekit && cargo publish --no-verify --registry quantum-forge --allow-dirty --token "$CARGO_REGISTRY_TOKEN" || EXIT_CODE=$?
              
              # Record that we published livekit
              echo "published_crates=livekit" >> $GITHUB_OUTPUT
            else
              echo "Skipping publishing for non-push, non-merged PR, or non-main branch events"
            fi
          else
            # Publish crates based on tags
            for CRATE in $CRATES_TO_PUBLISH; do
              echo "Publishing crate: $CRATE"
              cd "$CRATE" && cargo publish --no-verify --registry quantum-forge --token "$CARGO_REGISTRY_TOKEN" || EXIT_CODE=$?
              cd ..
            done
          fi
          
          exit $EXIT_CODE
  
  create_releases:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    # This job will always run and create at least a test release
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_CRATES: ${{ needs.publish.outputs.published_crates }}
        run: |
          # Set a default exit code
          EXIT_CODE=0
                
          # Check if this is a push to main or a merged PR
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "This is a push to main branch - publishing livekit to registry"
            # For push events, we'll publish the livekit crate for testing
            cd livekit && cargo publish --no-verify --registry quantum-forge --allow-dirty --token "$CARGO_REGISTRY_TOKEN" || EXIT_CODE=$?
            
            # Record that we published livekit
            echo "published_crates=livekit" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "This is a merged PR to main branch - publishing livekit to registry"
            cd livekit && cargo publish --no-verify --registry quantum-forge --allow-dirty --token "$CARGO_REGISTRY_TOKEN" || EXIT_CODE=$?
            
            # Record that we published livekit
            echo "published_crates=livekit" >> $GITHUB_OUTPUT
          else
            echo "Skipping publishing for non-push, non-merged PR, or non-main branch events"
          fi
          
          exit $EXIT_CODE
  
  create_releases:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    # This job will always run and create at least a test release
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_CRATES: ${{ needs.publish.outputs.published_crates }}
        run: |
          echo "Crates from previous job: ${PUBLISHED_CRATES}"
          
          # Always create a test release with a timestamp to ensure the workflow is working
          TIMESTAMP=$(date "+%Y%m%d-%H%M%S")
          TEST_RELEASE_TAG="test-quantum-forge-${TIMESTAMP}"
          
          echo "Creating test release with tag: ${TEST_RELEASE_TAG}"
          gh release create "${TEST_RELEASE_TAG}" \
            --title "Test Quantum Forge Registry Release (${TIMESTAMP})" \
            --notes "This is a test release to verify the GitHub Actions workflow for quantum-forge registry.\n\nTimestamp: ${TIMESTAMP}\n\nPublished crates: ${PUBLISHED_CRATES:-None}" \
            --target main
          
          if [ -z "$PUBLISHED_CRATES" ]; then
            echo "No crates were published. Only created test release."
          else
            # Process actual published crates
            for crate in $PUBLISHED_CRATES; do
              echo "Processing release for crate: $crate"
              
              if [ -f "$crate/CHANGELOG.md" ]; then
                version=$(grep -m 1 "^##" "$crate/CHANGELOG.md" | sed 's/^## //')
                changelog=$(awk '/^## /{if (p) {exit}; p=1; next} p' "$crate/CHANGELOG.md")
              else
                version=$(grep -m 1 "version" "$crate/Cargo.toml" | cut -d'"' -f2)
                changelog="Release of $crate version $version to quantum-forge registry"
              fi
              
              echo "Creating release for $crate@$version"
              
              gh release create "$crate@$version" \
                --title "$crate $version" \
                --notes "$changelog" \
                --target main || echo "Failed to create release for $crate"
            done
          fi
